     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                  
    14                                      ;cerinta
    15                                      ;x-(a*a+b)/(a+c/a); a,c-byte; b-doubleword; x-qword
    16 00000000 0A                          a db 10
    17 00000001 03                          c db 3
    18 00000002 05000000                    b dd 5
    19 00000006 0600000000000000            x dq 6
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          
    25 00000000 A0[00000000]                    MOV al,[a]
    26 00000005 F62D[00000000]                  IMUL byte[a]; ax=a*a
    27 0000000B 98                              CWDE ; convertire double word extended
    28 0000000C 0305[02000000]                  ADD eax,[b]; eax=a*a+b
    29                                          
    30 00000012 50                              push eax
    31                                          
    32 00000013 A0[01000000]                    MOV al, [c]
    33 00000018 6698                            CBW
    34 0000001A F63D[00000000]                  IDIV byte[a]; al:=c/a
    35 00000020 660305[00000000]                ADD ax,[a]; ax:=c/a+a
    36                                          
    37 00000027 665A                            pop dx
    38 00000029 6658                            pop ax
    39 0000002B 66F7FB                          idiv bx; ax:=(a*a+b)/(a+c/a)
    40                                          
    41 0000002E 98                              CWDE ; convert to double extended
    42 0000002F 99                              CDQ ; convert to quad word
    43                                          
    44 00000030 8B1D[0A000000]                  mov ebx, dword[x+4]; high
    45 00000036 8B0D[06000000]                  mov ecx, dword[x]; low
    46                                          
    47 0000003C 29C1                            sub ecx, eax ; scaderea din partea low 
    48 0000003E 19D3                            sbb ebx, edx ; scaderea din partea high
    49                                          
    50                                          ; exit(0)
    51 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
