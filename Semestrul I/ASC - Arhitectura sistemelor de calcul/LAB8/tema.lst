     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                                    
    11                                                    
    12                                  ;pb. 9 Se da un sir de dublucuvinte. Sa se obtina, incepand cu partea inferioara a dublucuvantului, dublucuvantul format din octetii
    13                                  ;superiori pari ai cuvintelor inferioare din elementele sirului de dublucuvinte. Daca nu sunt indeajuns octeti
    14                                  ;se va completa cu octetul FFh.
    15                                  
    16                                  ; 0 - de la stg la dr
    17                                  ; 1 - de la dr la stg
    18                                  
    19                                  
    20                                  ; our data is declared here (the variables needed by our program)
    21                                  segment data use32 class=data
    22 00000000 785634124D3C2C1A76-         s dd 12345678h, 1A2C3C4Dh, 98FCDD76h, 12783A2Bh; se va obtine d DD FF3A3C56h
    22 00000009 DDFC982B3A7812     
    23 00000010 02                          par db 2; variabila folosita pentru a testa daca numarul este par
    24                                      ls equ($-s)/4
    25 00000011 <res 00000004>              d resb ls
    26                                      
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          
    32 00000000 B904000000                      mov ecx, ls; punem lungimea in ecx pt a realiza bucla loop
    33 00000005 BE[00000000]                    mov esi, s
    34 0000000A BF[14000000]                    mov edi, d+ls-1; punem adresa lui d de la dr la stg
    35 0000000F E335                            jecxz sfarsit
    36                                          
    37                                          repeta:
    38 00000011 FC                                  cld; parcurgem sirul de la stanga la dreapta
    39 00000012 AD                                  lodsd; in eax vom avea dublucuvant
    40                                              
    41 00000013 88E0                                mov al, ah
    42 00000015 88E3                                mov bl, ah
    43 00000017 B400                                mov ah, 0
    44                                              
    45 00000019 F635[10000000]                      div byte[par]; vedem daca al este par
    46                                              ;mov al, ah; mutam restul din ah in al
    47 0000001F 80FC00                              cmp ah, 0
    48 00000022 7504                                jne pas
    49                                              
    50                                              adauga_in_d:
    51 00000024 88D8                                    mov al, bl
    52 00000026 FD                                      std
    53 00000027 AA                                      stosb 
    54                                                  
    55                                              pas:
    56 00000028 E2E7                                    loop repeta; daca mai sunt elemente pe parcurs(ecx>0) reia ciclul
    57                                          
    58 0000002A 83C701                          add edi, 1
    59 0000002D 81FF[11000000]                  cmp edi, d; se verifica daca a ajuns la final
    60 00000033 7411                            je sfarsit
    61 00000035 89F9                            mov ecx, edi
    62 00000037 81E9[11000000]                  sub ecx, d
    63 0000003D B0FF                            mov al, 0FFh
    64 0000003F 83EF01                          sub edi, 1
    65                                          repeta2:
    66 00000042 FD                                 std
    67 00000043 AA                                 stosb
    68 00000044 E2FC                            loop repeta2
    69                                              
    70                                      sfarsit:
    71                                          ; exit(0)
    72 00000046 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    73 00000048 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
