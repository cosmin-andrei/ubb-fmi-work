     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; se da un sir de quadwords
    14                                      ; se da o const k
    15                                      ; sa se adune const k la fiecare quad din sir
    16                                      
    17 00000000 010000000000000002-         s dq 1,2,3
    17 00000009 000000000000000300-
    17 00000012 000000000000       
    18                                      ls equ ($-s)/8
    19 00000018 <res 00000018>              r resq ls
    20                                      k equ 0ah
    21                                      
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 B903000000                      mov ecx, ls
    27 00000005 BE00000000                      mov esi, 0
    28                                          repeta:
    29 0000000A 8B86[00000000]                      mov eax, dword[s+esi+0]
    30 00000010 8B96[04000000]                      mov edx, dword[s+esi+4]
    31 00000016 83C00A                              add eax, k
    32 00000019 83D200                              adc edx, 0
    33 0000001C 8986[18000000]                      mov dword[r+esi+0], eax
    34 00000022 8996[1C000000]                      mov dword[r+esi+4], edx
    35 00000028 83C608                              add esi, 8
    36 0000002B E2DD                            loop repeta
    37                                      
    38                                          ; exit(0)
    39 0000002D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 0000002F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
