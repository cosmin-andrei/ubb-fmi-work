     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  extern exit, fopen, fclose, scanf, fprintf, fread     
     6                                  import exit msvcrt.dll
     7                                  import fopen msvcrt.dll  
     8                                  import fclose msvcrt.dll
     9                                  import fprintf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  
    13                                  
    14                                  ;Se da un nume de fisier (definit in segmentul de date). Sa se creeze un fisier cu numele dat, apoi sa se citeasca de la tastatura cuvinte pana cand se citeste de la tastatura caracterul '$'. Sa se scrie in fisier d
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 646174652E74787400          nume_fisier db "date.txt", 0; numele fisierului care va fi creat
    19 00000009 257300                      mod_acces db "%s", 0; s- string: pt scriere
    20 0000000C FFFFFFFF                    descriptor_fis dd -1;variabila in care vom salva descriptorul fisierului - necesar pentru a putea face referire la fisier
    21 00000010 2573000000000000            formatcitire dd '%s', 0
    22                                      
    23 00000018 0000<rept>                  sir times 10 dw 0
    24 0000002C 0000                        cuvant dw "", 0
    25 0000002E 20                          spatiu db " "
    26 0000002F 303132333435363738-         cifre db '0123456789'
    26 00000038 39                 
    27                                      lc equ $-cifre
    28 00000039 0000<rept>                  copie times 10 dw 0
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                           ; apelam fopen pentru a crea fisierul
    34                                          ; functia va returna in EAX descriptorul fisierului sau 0 in caz de eroare
    35                                          ; eax = fopen(nume_fisier, mod_acces)
    36 00000000 68[09000000]                    push dword mod_acces     
    37 00000005 68[00000000]                    push dword nume_fisier
    38 0000000A FF15[00000000]                  call [fopen]
    39 00000010 83C408                          add esp, 4*2                ; eliberam parametrii de pe stiva
    40                                  
    41 00000013 A3[0C000000]                    mov [descriptor_fis], eax   ; salvam valoarea returnata de fopen in variabila descriptor_fis
    42                                          
    43                                          ; verificam daca functia fopen a creat cu succes fisierul (daca EAX != 0)
    44 00000018 83F800                          cmp eax, 0
    45 0000001B 747D                            je final
    46 0000001D BE[18000000]                    mov esi, sir ; initializam pointerul de sir la inceputul sirului
    47                                          
    48                                          citeste:
    49 00000022 68[2C000000]                        push dword cuvant
    50 00000027 68[10000000]                        push dword formatcitire
    51 0000002C FF15[00000000]                      call [fread]
    52 00000032 83C408                              add esp, 4*2
    53                                  
    54 00000035 833D[2C000000]24                    cmp dword [cuvant], '$'
    55 0000003C 7410                                JE modifesi
    56                                              
    57 0000003E A1[2C000000]                        mov eax, [cuvant]
    58 00000043 8986[18000000]                      mov [sir+esi], eax
    59 00000049 83C601                              add esi, 1
    60 0000004C EBD4                            jmp citeste
    61                                             
    62                                          modifesi:
    63 0000004E BE00000000                          mov esi, 0
    64 00000053 EB00                                jmp ParcurgereSir
    65                                              
    66                                          ParcurgereSir:
    67 00000055 8A86[18000000]                      mov al, byte[sir+esi]
    68 0000005B 890D[39000000]                      mov [copie], ecx
    69 00000061 BD00000000                          mov ebp, 0
    70 00000066 B90A000000                          mov ecx, lc
    71                                              
    72                                              repetacifre:
    73 0000006B 8A9D[2F000000]                          mov bl, byte[cifre+ebp]
    74 00000071 38D8                                    cmp al, bl
    75 00000073 7402                                    je adauga
    76 00000075 7515                                    jne next
    77                                                  
    78                                                  adauga:
    79 00000077 FFB6[18000000]                              push dword [sir+esi]
    80 0000007D FF35[0C000000]                              push dword [descriptor_fis]
    81 00000083 FF15[00000000]                              call [fprintf]
    82 00000089 83C408                                      add esp, 4*2
    83                                                  
    84                                                  next:
    85 0000008C 45                                          inc ebp
    86                                                      
    87 0000008D E2DC                                loop repetacifre
    88                                              
    89 0000008F 8B0D[39000000]                      mov ecx, [copie]
    90 00000095 83C601                              add esi, 1
    91                                              
    92 00000098 E2BB                            loop ParcurgereSir
    93                                          
    94                                          final:
    95 0000009A FF15[00000000]                  call [fclose]
    96 000000A0 83C404                          add esp, 4
    97                                          ; exit(0)
    98 000000A3 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    99 000000A5 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
